package cognitiveprom.log;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.Reader;
import java.io.UnsupportedEncodingException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVRecord;
import org.apache.commons.io.input.BOMInputStream;
import org.deckfour.xes.model.XEvent;
import org.deckfour.xes.model.XLog;
import org.deckfour.xes.model.XTrace;

import com.google.common.base.Joiner;

import cognitiveprom.exceptions.LogImportException;
import cognitiveprom.tools.XLogHelper;

/**
 * Class to import a {@link CognitiveLog} starting from a TSV file generated by Tobii Studio
 * 
 * @author Andrea Burattin
 */
public class TSVCognitiveImporter extends CognitiveLogImporter {

	private static SimpleDateFormat dateParser = new SimpleDateFormat("HH:mm:ss.SSS");
	private Set<String> namesOfAOIs = new HashSet<String>();
	
	/**
	 * Sets the names of the AOIs to be identified
	 * 
	 * @param AOIs the names of the AOIs as in Tobii Studio
	 */
	public void addAOIs(String... AOIs) {
		namesOfAOIs.addAll(namesOfAOIs);
	}
	
	@Override
	public String getDescription() {
		return "Tobii TSV file";
	}

	@Override
	public String getSupportedFileExtension() {
		return "tsv";
	}

	@Override
	public CognitiveLog load(File fileName) throws LogImportException {
		if (namesOfAOIs.isEmpty()) {
			throw new LogImportException("No AOI set for import!");
		}
		
		Reader reader;
		try {
			reader = new InputStreamReader(new BOMInputStream(new FileInputStream(fileName)), "UTF-8");
		} catch (UnsupportedEncodingException | FileNotFoundException e) {
			throw new LogImportException(e.getMessage());
		}

		XLog intermediateLogGraph = XLogHelper.generateNewXLog(fileName.getName());
		CSVParser parser = null;
		try {
			parser = new CSVParser(reader, CSVFormat.TDF.withHeader());
			
			Map<String, String> AOIfieldsGraph = new HashMap<String, String>();
			Pattern AOIpatternsGraph = Pattern.compile("AOI\\[(" + Joiner.on('|').join(namesOfAOIs) + ")\\]Hit");
			Map<String, XTrace> studentsToGraphTraces = new HashMap<String, XTrace>();
			
			for (CSVRecord record : parser) {
				// identify all aoi fields from headers
				if (AOIfieldsGraph.isEmpty()) {
					for (String header : parser.getHeaderMap().keySet()) {
						Matcher matcher = AOIpatternsGraph.matcher(header);
						if (matcher.find()) {
							AOIfieldsGraph.put(header, matcher.group(1));
						}
					}
				}
				
				String participantName = record.get("ParticipantName");
				Date startDate;
				try {
					startDate = dateParser.parse(record.get("LocalTimeStamp"));
				} catch (ParseException e) {
					throw new LogImportException(e.getMessage());
				}
			
				// add aois
				XTrace currentSubjectTraceGraph = studentsToGraphTraces.get(participantName);
				if (currentSubjectTraceGraph == null) {
					currentSubjectTraceGraph = XLogHelper.insertTrace(intermediateLogGraph, participantName);
					studentsToGraphTraces.put(participantName, currentSubjectTraceGraph);
				}
				for (String AOIField : AOIfieldsGraph.keySet()) {
					if (record.get(AOIField).equals("1")) {
						XEvent eventStart = XLogHelper.insertEvent(currentSubjectTraceGraph, AOIfieldsGraph.get(AOIField), startDate);
						XLogHelper.decorateElement(eventStart, "fixationDuration", Integer.parseInt(record.get("GazeEventDuration")));
					}
				}
			}
			
		} catch (IOException e) {
			throw new LogImportException(e.getMessage());
		} finally {
			try {
				parser.close();
			} catch (IOException e) {
				throw new LogImportException(e.getMessage());
			}
		}
		
		return new CognitiveLog(intermediateLogGraph);
	}
}
